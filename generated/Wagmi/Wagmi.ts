// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AgreementAdded extends ethereum.Event {
  get params(): AgreementAdded__Params {
    return new AgreementAdded__Params(this);
  }
}

export class AgreementAdded__Params {
  _event: AgreementAdded;

  constructor(event: AgreementAdded) {
    this._event = event;
  }

  get agreement(): string {
    return this._event.parameters[0].value.toString();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Signed extends ethereum.Event {
  get params(): Signed__Params {
    return new Signed__Params(this);
  }
}

export class Signed__Params {
  _event: Signed;

  constructor(event: Signed) {
    this._event = event;
  }

  get message(): string {
    return this._event.parameters[0].value.toString();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Wagmi__indexToAgreementStorageResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: Bytes;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: Bytes,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getSigner(): Address {
    return this.value1;
  }

  getAgreement(): string {
    return this.value2;
  }

  getSignature(): Bytes {
    return this.value3;
  }

  getIsSigned(): boolean {
    return this.value4;
  }
}

export class Wagmi__signerToAgreementMappingResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: Bytes;

  constructor(value0: BigInt, value1: Address, value2: string, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getSigner(): Address {
    return this.value1;
  }

  getAgreement(): string {
    return this.value2;
  }

  getSignature(): Bytes {
    return this.value3;
  }
}

export class Wagmi extends ethereum.SmartContract {
  static bind(address: Address): Wagmi {
    return new Wagmi("Wagmi", address);
  }

  indexToAgreementStorage(
    param0: BigInt
  ): Wagmi__indexToAgreementStorageResult {
    let result = super.call(
      "indexToAgreementStorage",
      "indexToAgreementStorage(uint256):(uint256,address,string,bytes,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Wagmi__indexToAgreementStorageResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBytes(),
      result[4].toBoolean()
    );
  }

  try_indexToAgreementStorage(
    param0: BigInt
  ): ethereum.CallResult<Wagmi__indexToAgreementStorageResult> {
    let result = super.tryCall(
      "indexToAgreementStorage",
      "indexToAgreementStorage(uint256):(uint256,address,string,bytes,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Wagmi__indexToAgreementStorageResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBytes(),
        value[4].toBoolean()
      )
    );
  }

  signerToAgreementMapping(
    param0: Address,
    param1: BigInt
  ): Wagmi__signerToAgreementMappingResult {
    let result = super.call(
      "signerToAgreementMapping",
      "signerToAgreementMapping(address,uint256):(uint256,address,string,bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Wagmi__signerToAgreementMappingResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBytes()
    );
  }

  try_signerToAgreementMapping(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Wagmi__signerToAgreementMappingResult> {
    let result = super.tryCall(
      "signerToAgreementMapping",
      "signerToAgreementMapping(address,uint256):(uint256,address,string,bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Wagmi__signerToAgreementMappingResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBytes()
      )
    );
  }

  verifyAgreement(signer: Address, _index: BigInt, agreement: string): boolean {
    let result = super.call(
      "verifyAgreement",
      "verifyAgreement(address,uint256,string):(bool)",
      [
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromString(agreement)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyAgreement(
    signer: Address,
    _index: BigInt,
    agreement: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyAgreement",
      "verifyAgreement(address,uint256,string):(bool)",
      [
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromString(agreement)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _worldId(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _groupId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _actionId(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAgreementCall extends ethereum.Call {
  get inputs(): AddAgreementCall__Inputs {
    return new AddAgreementCall__Inputs(this);
  }

  get outputs(): AddAgreementCall__Outputs {
    return new AddAgreementCall__Outputs(this);
  }
}

export class AddAgreementCall__Inputs {
  _call: AddAgreementCall;

  constructor(call: AddAgreementCall) {
    this._call = call;
  }

  get _agreement(): AddAgreementCall_agreementStruct {
    return changetype<AddAgreementCall_agreementStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AddAgreementCall__Outputs {
  _call: AddAgreementCall;

  constructor(call: AddAgreementCall) {
    this._call = call;
  }
}

export class AddAgreementCall_agreementStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get signer(): Address {
    return this[1].toAddress();
  }

  get agreement(): string {
    return this[2].toString();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }

  get isSigned(): boolean {
    return this[4].toBoolean();
  }
}

export class SignAgreementCall extends ethereum.Call {
  get inputs(): SignAgreementCall__Inputs {
    return new SignAgreementCall__Inputs(this);
  }

  get outputs(): SignAgreementCall__Outputs {
    return new SignAgreementCall__Outputs(this);
  }
}

export class SignAgreementCall__Inputs {
  _call: SignAgreementCall;

  constructor(call: SignAgreementCall) {
    this._call = call;
  }

  get message(): string {
    return this._call.inputValues[0].value.toString();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get root(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }
}

export class SignAgreementCall__Outputs {
  _call: SignAgreementCall;

  constructor(call: SignAgreementCall) {
    this._call = call;
  }
}
